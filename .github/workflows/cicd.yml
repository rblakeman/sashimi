# CICD name
name: CICD

# The on key is used to define when
# the CICD should be triggered, aka Event
on:
  # When someone push or merge a pull request
  # inside the main branch
  push:
    branches:
      - main
  # When someone create a pull request from
  # the main branch
  pull_request:
    branches:
      - main

# A job is a set of steps that execute on the same runner.
# The jobs can be run in parallel or sequentially and can
# have many steps.
# In this case, I created a single job with many steps
# since the configuration is pretty simple but
# I could have created a different structure using parallel jobs.
# Each job uses an own runner.
jobs:
  # Job name
  checks:
    name: Checks
    # OS of the runner
    runs-on: ubuntu-latest

    # A step is an individual task that can run commands in a job
    # and share the same runner.
    # Each step can run a ready-to-use action or a bash command
    steps:
      # Runner meaningful name
      - name: Checkout
        # Ready-to-use action made by GH or third party
        # companies
        # We can recognize the GH actions from the third party
        # ones checking the name prefix.
        # `actions/` = GH
        # `something-else/` = third party
        # This is a GH ready-to-use action
        uses: actions/checkout@v2

      - name: Install Yarn (if necessary)
      # Only necessary for local debugging using 'act' tool
      # Yarn is already installed/enabled in GitHub Actions runners
        run:
          (yarn -v || corepack enable && corepack prepare yarn@1.22.15 --activate)

      - name: Health Check
        run: echo yarn && yarn -v && echo node && node -v

      - name: Install Dependencies
        run: yarn setup:ci

      # - name: Setup and run Cypress
      #   # This is a cypress ready-to-use action
      #   # that setups the runner installing the
      #   # dependencies using Yarn and installing Cypress
      #   uses: cypress-io/github-action@v2
      #   # The action accepts parameters.
      #   # You should read the documentation before using an action
      #   # to understand what it does under the hood.
      #   with:
      #     browser: chrome
      #     headless: true
      #     start: yarn start

      - name: Run ESLint
        # Run the lint custom Yarn command that triggers the
        # ESLint linter check
        run: yarn lint

      - name: Run Typecheck
        # Run the typecheck custom Yarn command that triggers the
        # tsc type check
        run: yarn typecheck:all

      # - name: Run Prettier
      #   # Run the format:check custom Yarn command
      #   # that runs prettier to check code format
      #   run: yarn format:check

      # - name: Run Jest
      #   # Run the test:unit custom Yarn command
      #   # that runs Jest
      #   run: yarn test:unit

      # - name: Push the coverage
      #   # Run the coverage:push custom Yarn command
      #   # that push the Jest coverage to codcov
      #   # The secrets.CODECOV is a constant that is used
      #   # to store the CODECOV token.
      #   # The GH secrets are used like ENV variables to pass sensible informatin
      #   # to the flow.
      #   run: yarn coverage:push -- --token=${{ secrets.CODECOV_TOKEN }}

      - name: Build Packages + Docusaurus
        # Run the build command for all Lerna packages (components)
        # Then run the build command for Docusaurus (dependent on component builds)
        run: npx lerna run build

  # Job name
  deploy:
    name: Deploy
    needs: checks
    # OS of the runner
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    # A step is an individual task that can run commands in a job
    # and share the same runner.
    # Each step can run a ready-to-use action or a bash command
    steps:
        # Runner meaningful name
      - name: Checkout
        # Ready-to-use action made by GH or third party
        # companies
        # We can recognize the GH actions from the third party
        # ones checking the name prefix.
        # `actions/` = GH
        # `something-else/` = third party
        # This is a GH ready-to-use action
        uses: actions/checkout@v2

      - name: Install Yarn (if necessary)
      # Only necessary for local debugging using 'act' tool
      # Yarn is already installed/enabled in GitHub Actions runners
        run:
          (yarn -v || corepack enable && corepack prepare yarn@1.22.15 --activate)

      - name: Health Check
        run: echo yarn && yarn -v && echo node && node -v

      - name: Install Dependencies
        run: yarn setup:ci

      - name: Build Packages + Docusaurus
        # Run the build command for all Lerna packages (components)
        # Then run the build command for Docusaurus (dependent on component builds)
        run: npx lerna run build

      # Popular action to deploy to GitHub Pages:
      # Docs: https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-docusaurus
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Build output to publish to the `gh-pages` branch:
          publish_dir: ./apps/sashimi-docs/build
          # The following lines assign commit authorship to the official
          # GH-Actions bot for deploys to `gh-pages` branch:
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          # The GH actions bot is used by default if you didn't specify the two fields.
          # You can swap them out with your own user credentials.
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com
